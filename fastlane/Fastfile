# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

load "util/lanes.rb"
load "util/versions.rb"
load "util/git.rb" 
load "util/swift_package_releases.rb"
load "util/add_files_to_project.rb"
load "util/sbom.rb"
import "Fastfile_Health"

platform :ios do
  desc <<~DOC
    Publish a swift package to our release repository.
    
    Parameters:
      project_folder        - the folder of the project to be released (e.g., HealthAPILibrary, HealthSDK)"
      package_folder        - the folder to the swift package to be released (e.g., GiniHealthAPILibrary, GiniHealthAPILibraryPinning)"
      version_file_path     - the path to the file containing the package version
      git_tag               - the git tag name used to release the project
      repo_url              - the url of the release repository
      repo_user             - the username to use for authentication
      repo_password         - the password to use for authentication
      ci                    - set to "true" if running on a CI machine

  DOC
  lane :publish_swift_package do |options|
    (project_folder, package_folder, version_file_path, git_tag, repo_url, repo_user, repo_password, ci) = 
      check_and_get_options(options, [:project_folder, :package_folder, :version_file_path, :git_tag, :repo_url, :repo_user, :repo_password, :ci], UI)

      tag_version = get_project_version_from_tag(package_folder, git_tag, UI)
      package_version = get_project_version_from_version_file(version_file_path, UI)

      if tag_version != package_version
        UI.abort_with_message!  <<~MESSAGE
          Version in the tag is different from the package version:
            * tag       : #{tag_version}
            * project   : #{package_version}
          
          Change the version in the tag or update the packages's version in "#{version_file_path}".
        MESSAGE
      end

      UI.message <<~MESSAGE
        Will release to the release repository:
          * repository url  : #{repo_url}
          * project:        : #{project_folder}
          * swift package   : #{package_folder}
          * version         : #{package_version}
      MESSAGE

      if ci
        configure_git_on_ci_machines("Team Mobile Schorsch", "valentina.iancu@gini.net")
      end

      release_repo_path = checkout_release_repo(repo_url, repo_user, repo_password)

      copy_swift_package_to_release_repo(release_repo_path, project_folder, package_folder)

      update_release_repo(release_repo_path, package_version)
      
      UI.success <<~MESSAGE
        Successfully released to the release repository:
          * repository url  : #{repo_url}
          * project:        : #{project_folder}
          * swift package   : #{package_folder}
          * version         : #{package_version}
      MESSAGE

  end

  desc <<~DOC
  Build a documentation.
   
  Parameters:
    project_folder        - the folder of the project to be released (e.g., HealthAPILibrary, HealthSDK)
    package_folder        - the folder to the swift package to be released (e.g., GiniHealthAPILibrary, GiniHealthAPILibraryPinning)
  DOC
  lane :build_docs do |options|
    (project_folder, package_folder) = 
      check_and_get_options(options, [:project_folder, :package_folder], UI)
      
    jazzy config: "#{project_folder}/#{package_folder}/.jazzy.yaml"

    UI.success <<~MESSAGE
      Documentation successfully built:
        * available at    : #{project_folder}/#{package_folder}/Documentation/Api
    MESSAGE

  end

  desc <<~DOC
    Publish a documentation to gh-pages.

    Releases the documentation into a folder hierarchy constructed from the package_folder and project version:
    <gh_pages_url>/<package_folder>/<project_version>
    Example: <gh_pages_url>/GiniCaptureSDK/1.11.0

    If the 'is_stable_release' option is set to 'true', then it updates the package root index.html 
    (at <gh_pages_url>/<package_folder>/index.html) to automatically redirect to the released version.
    
    Parameters:
      project_folder        - the folder of the project to be released (e.g., HealthAPILibrary, HealthSDK)
      package_folder        - the folder to the swift package to be released (e.g., GiniHealthAPILibrary, GiniHealthAPILibraryPinning)
      version_file_path     - the path to the file containing the package version
      git_tag               - the git tag name used to release the project
      repo_user             - the username to use for authentication
      repo_password         - the password to use for authentication
      ci                    - set to "true" if running on a CI machine
      documentation_title   - the title used on the root index page
      is_stable_release     - set to "true" if it's a stable release that should be shown by default 
      dry_run               - (optional) executes without permanent side effects

  DOC
  lane :publish_docs do |options|
    # Required options
    (project_folder, package_folder, version_file_path, git_tag, repo_user, repo_password, ci, documentation_title, is_stable_release) = 
      check_and_get_options(options, [:project_folder, :package_folder, :version_file_path, :git_tag, :repo_user, :repo_password, :ci, :documentation_title, :is_stable_release], UI)
      # Optional options
      dry_run = options[:dry_run]

      build_docs(project_folder: project_folder, package_folder: package_folder)

      tag_version = get_project_version_from_tag(package_folder, git_tag, UI)
      package_version = get_project_version_from_version_file(version_file_path, UI)

      if tag_version != package_version
        UI.abort_with_message!  <<~MESSAGE
          Version in the tag is different from the project version:
            * tag       : #{tag_version}
            * project   : #{package_version}
          
          Change the version in the tag or update the project's version in "#{version_file_path}"
        MESSAGE
      end

      UI.message <<~MESSAGE
      Start docs release:
        * project_folder      : #{project_folder}
        * package_folder      : #{package_folder}
        * package_version     : #{package_version}
        * git tag             : #{git_tag}
        * destination branch  : gh-pages
        * destination folder  : #{package_folder}/
        * url                 : "https://developer.gini.net/gini-mobile-ios/#{package_folder}/index.html"
     MESSAGE

      if ci
        configure_git_on_ci_machines("Team Mobile Schorsch", "valentina.iancu@gini.net")
      end

      # Clear gh-pages directory 
      sh("rm -rf gh-pages")

      # Clone
      sh("git clone -b gh-pages https://#{repo_user}:#{repo_password}@github.com/gini/gini-mobile-ios.git gh-pages")

      destination_path = "#{package_folder}/#{package_version}"

      Dir.chdir("gh-pages") do
        UI.message "Clear out the existing documentation"
        sh("git rm -rf #{destination_path} --ignore-unmatch && git clean -fd")

        UI.message "Copy over the current documentation"
        sh("mkdir -p #{destination_path} && cp -R ../../#{project_folder}/#{package_folder}/Documentation/Api/ #{destination_path}")

        UI.message "Disable jekyll"
        sh("touch .nojekyll")

        if is_stable_release
          UI.message <<~MESSAGE
            Update the package root index.html to redirect to this documentation version.
          MESSAGE
  
          index_html = <<~INDEX_HTML
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8">
              <title>#{documentation_title}</title>
              <meta http-equiv="refresh" content="0; URL=https://developer.gini.net/gini-mobile-ios/#{destination_path}/index.html" />
            </head>
            <body>
              Redirecting to the latest stable version...
            </body>
          </html>
          INDEX_HTML
  
          File.open("#{package_folder}/index.html", "w") { |f| 
            f.write index_html
          }
        else
          UI.message "Not changing the project root index.html."
        end

        if !dry_run 
          UI.message "Commit and push the new documentation"
          sh("git add --all")
          sh("git diff --quiet --exit-code --cached || git commit -m 'Release #{package_folder} documentation for tag #{git_tag}' --author='Team Mobile <team-mobile@gini.net>'")
          git_push_with_retry("gh-pages", UI)
        else
          UI.message "Skipping commit and push (dry run)"
        end
      end

      UI.success <<~MESSAGE
      Documentation released:
        * project_folder      : #{project_folder}
        * package_folder      : #{package_folder}
        * git_tag             : #{git_tag}
        * destination branch  : gh-pages
        * destination folder  : #{package_folder}/
        * url                 : https://developer.gini.net/gini-mobile-ios/#{package_folder}/index.html
      MESSAGE
  end

  desc <<~DOC
    Create release tags for all packages that have different versions than their latest release tag.
  DOC
  lane :create_release_tags do |options|

    # Not all packages require own release tags (some are released automatically with other packages)
    ignored_packages = [/\/.+Pinning\//]

    Dir.chdir("..") do
      # Gather all packages which have a (...)Version.swift file
      packages = Dir["./**/*Version.swift"]
        .map { |version_file|
          if ignored_packages.find { |ignored| version_file =~ ignored }
            next nil
          end

          contents = File.open(version_file).read

          if match = contents.match(/=.*?"(.+)"/)
            components = version_file.split("/")
            { :package_folder => components[2], :version => match.captures[0] }
          end
        }
        .compact

      up_to_date = []
      to_be_released = []

      # Create release tags for packages which have different versions than their latest release tag
      # Create release tags for packages which have different versions than their latest release tag
      packages.each do |package|
        latest_version = get_latest_version_from_release_tags(package[:package_folder], UI)

        if latest_version.nil?
          UI.message("No release tags found for #{package[:package_folder]}, treating as a new package.")
          # Treat the package as new and create a release tag
          to_be_released.push package
          git_create_release_tag(package[:package_folder], package[:version])

          if UI.confirm("Push release tag?")
            git_push_release_tag(package[:package_folder], package[:version])
          end
        elsif package[:version] == latest_version
          # The current package version is the same as the one in the latest release tag
          UI.message("#{package[:package_folder]} is up to date with version #{package[:version]}.")
          up_to_date.push package
        elsif git_has_release_tag(package[:package_folder], package[:version])
          # The current package version has already been released
          UI.message("#{package[:package_folder]} version #{package[:version]} has already been released.")
          up_to_date.push package
        else
          # The package version needs a new release tag
          UI.message("#{package[:package_folder]} version #{package[:version]} will be tagged as a new release.")
          to_be_released.push package
          git_create_release_tag(package[:package_folder], package[:version])

        if UI.confirm("Push release tag?")
          git_push_release_tag(package[:package_folder], package[:version])
         end
        end
      end


      if to_be_released.empty?
        UI.success "All packages are up-to-date. No release tags needed."
      else
        UI.message <<~MESSAGE
            Following packages are up-to-date:
              #{up_to_date.map{ |package| "- #{package[:package_folder]} #{package[:version]}" }.join("\n  ") }
          MESSAGE

        UI.success <<~MESSAGE
            Created release tags for:
              #{to_be_released.map{ |package| "- #{package[:package_folder]} #{package[:version]}" }.join("\n  ") }
          MESSAGE
      end
    end
  end
  
  desc <<~DOC
    Create documentation release tags for all packages that have documentation that changed since their latest release.
  DOC
  lane :create_documentation_release_tags do
    Dir.chdir("..") do
      new_doc_release_tags = Dir["./**/Documentation"]
        .filter { |doc_dir|
          # Gather all projects which have documentation that changed since the last release
          components = doc_dir.split("/")
          puts components
          package_folder = components[2]
          puts package_folder
          did_folder_change_since_last_release(package_folder, doc_dir, UI)
        }
        .map { |doc_dir|
          # Create documentation release tags
          components = doc_dir.split("/")
          package_folder = components[2]
          latest_release_tag = get_latest_release_tag(package_folder)

          if match = latest_release_tag.match(/(^.*?;)doc.*?([0-9]+)/)
            next_doc_release_nr = match.captures[1].to_i + 1
            "#{match.captures[0]}doc-#{next_doc_release_nr}"
          else
            "#{latest_release_tag};doc-1"
          end
        }

      puts new_doc_release_tags
      
      if new_doc_release_tags.empty?
        UI.success "Every documentation is up-to-date. No documentation release tags needed."
      else
        # Create and push tags
        new_doc_release_tags.each do |new_doc_release_tag|
          git_create_tag(new_doc_release_tag)

          if UI.confirm("Push documentation release tag?")
            git_push_tag(new_doc_release_tag)
          end
        end
        
        UI.success <<~MESSAGE
            Created documentation release tags for:
              #{new_doc_release_tags.map{ |tag| "- #{tag}" }.join("\n  ") }
          MESSAGE
      end
    end
  end

  desc <<~DOC
    Setup Manual Signing for project at path
  DOC
  lane :setup_manual_signing do |options|
    (project_path, team_id, target, bundle_identifier, profile_name, entitlements_file_path, ci) = 
      check_and_get_options(options, [:project_path, :team_id, :target, :bundle_identifier, :profile_name, :entitlements_file_path, :ci], UI)
    # Optional options
    target_extension = options[:target_extension]
    bundle_identifier_extension = options[:bundle_identifier_extension]
    profile_name_extension = options[:profile_name_extension]
    entitlements_file_path_extension = options[:entitlements_file_path_extension]

    update_code_signing_settings(
      use_automatic_signing: false,
      path: project_path,
      team_id: team_id,
      targets: target,
      bundle_identifier: bundle_identifier,
      profile_name: profile_name,
      entitlements_file_path: entitlements_file_path
    )
    # For signing an extension you need to pass the following params: target_extension, bundle_identifier_extension, profile_name_extension, entitlements_file_path_extension
    if (target_extension && bundle_identifier_extension && profile_name_extension && entitlements_file_path_extension)
    update_code_signing_settings(
      use_automatic_signing: false,
      path: project_path,
      team_id: team_id,
      targets: target_extension,
      bundle_identifier: bundle_identifier_extension,
      profile_name: profile_name_extension,
      entitlements_file_path: entitlements_file_path_extension
    )
    end
  end
  
  desc <<~DOC
    Add Resources to Project file
  DOC
  lane :add_resources do |options|
    (project_path, resource_name, target_name, resources_path, ci) = 
      check_and_get_options(options, [:project_path, :resource_name, :target_name, :resources_path, :ci], UI)

    project = Xcodeproj::Project.open(project_path)
    targetSDK = project.targets.find { |target| target.to_s == target_name }
    resourcesgroup = project.new_group(resource_name)
    addFiles("#{resources_path}/*", resourcesgroup, targetSDK)
    project.save
  end

  desc <<~DOC
    Generate CycloneDX SBOMS for all swift packages. The SBOMs are zipped and uploaded to GitHub.
    
    Parameters:
      swift_package_repo_urls     - the list of swift package repository urls
      repo_user                   - the username to use for authentication
      repo_password               - the password to use for authentication
      ci                          - set to "true" if running on a CI machine

  DOC
  lane :generate_sboms do |options|
    (swift_package_repo_urls, repo_user, repo_password, ci) = 
      check_and_get_options(options, [:swift_package_repo_urls, :repo_user, :repo_password, :ci], UI)

      UI.message <<~MESSAGE
        Will generate CycloneDX SBOMs for swift packages:
          * swift package repository urls  : #{swift_package_repo_urls}
      MESSAGE

      if ci
        configure_git_on_ci_machines("Team Mobile Schorsch", "valentina.iancu@gini.net")
      end

      sbom_paths = []

      swift_package_repos = swift_package_repo_urls.split(",").map(&:strip)

      swift_package_repos.each do |repo_url|
        release_repo_path = clone_repo(repo_url, repo_user, repo_password, 1)
        sbom_path = generate_sbom(release_repo_path)

        sbom_paths.push sbom_path
      end

      all_sboms_zip_file_name = "sbom-jsons.zip"
      
      sh("zip -rj #{all_sboms_zip_file_name} #{sbom_paths.join(" ")}")
      
      UI.success <<~MESSAGE
        Successfully generated CycloneDX SBOMS for all swift packages:
          * swift package repository urls   : #{swift_package_repo_urls}
          * generated sbom paths                 : #{sbom_paths.map{ |path| "fastlane/#{path}" }.join(", ")}
          * location of zip with all sboms  : "fastlane/#{all_sboms_zip_file_name}"
      MESSAGE

  end

  desc <<~DOC
  Generate a release podspec and publish it on https://github.com/gini/gini-podspecs.
  
  Parameters:
    xcframeworks_folder_path        - path to the folder which contains the .xcframeworks files
    pod_name                        - name of the pod, usually the same as the Swift package name, e.g. GiniBankSDK or GiniCaptureSDKPinning
    podspecs_repo_sdk_folder_path   - path to the folder which contains the local clone of the https://github.com/gini/gini-podspecs repo
    template_podspec_path           - path to the template podspec file, which is modified and used for the new pod version e.g: BankSDK/GiniBankSDK/Pod/GiniBankSDK.podspec

  DOC
  lane :publish_podspec do |options|

    (xcframeworks_folder_path, pod_name, podspecs_repo_sdk_folder_path, template_podspec_path) = 
      check_and_get_options(options, [:xcframeworks_folder_path, :pod_name, :podspecs_repo_sdk_folder_path, :template_podspec_path], UI)
    
    # Extract the version from the tag (assuming the tag format is "GiniBankSDK;X.X.X")
    # Remove "Pinning" suffix, if needed, because we don't tag pinning releases separately (pinning version is released together with the non-pinning version)
    project_id = pod_name.sub('Pinning', '') 
    version_folder = get_latest_version_from_release_tags(project_id, UI)
    
    # Step 1: Compress the XCFrameworks into a zip file
    zip_name = "#{pod_name}-XCFrameworks.zip" #e.g GiniBankSDK or GiniBankSDKPinning
    sh "cd #{xcframeworks_folder_path} && zip -r #{zip_name} ."
    
    # Step 2: Create a subfolder named after the version
    sdk_folder = "#{xcframeworks_folder_path}/#{version_folder}"
    sh "mkdir -p #{sdk_folder}"

    # Step 3: Copy the zip file and podspec into the new folder
    sh "cp #{xcframeworks_folder_path}/#{zip_name} #{sdk_folder}/"
    # template_podspec_path sould look like: BankSDK/GiniBankSDK/Pod/GiniBankSDK.podspec or BankSDK/GiniBankSDKPinning/Pod/GiniBankSDKPinning.podspec
    sh "cp #{template_podspec_path} #{sdk_folder}/"
    
    # Step 4: Update the version in the podspec
    podspec_file_path = "#{sdk_folder}/#{pod_name}.podspec"
    sh "sed -i '' 's/spec.version[[:space:]]*=[[:space:]]*\".*\"/spec.version = \"#{version_folder}\"/' #{podspec_file_path}"

    # Step 5: Copy the recently created version folder (e.g. 3.7.2) in gini-podspecs repo folder
    sh "cp -r #{sdk_folder} #{podspecs_repo_sdk_folder_path}/"

    # Step 6: Commit the changes to gini-podspecs repo
    sh "cd #{podspecs_repo_sdk_folder_path} && git add . && git commit -m '[Update] #{pod_name} (#{version_folder})'" 

    # Step 7: Push the changes to gini-podspecs repo
    if UI.confirm("Are you sure you want to push these changes to the https://github.com/gini/gini-podspecs repo?")
      sh "cd #{podspecs_repo_sdk_folder_path} && git push origin master"
    end
  end

  desc <<~DOC
  Set up provisioning profiles for app distribution.
  
  This lane handles code signing setup by downloading and installing the necessary
  provisioning profiles from the match repository.
  
  Parameters:
    distribution_type - Type of distribution: "adhoc" or "development" (default: "adhoc")
  
  Environment Variables:
    APP_IDENTIFIER    - Bundle identifier for the app (e.g. com.company.app)
    MATCH_GIT_URL     - Git URL for the match certificates repository
DOC
lane :setup_provisioning do |options|
  bundle_id = ENV["APP_IDENTIFIER"]
  distribution_type = options[:distribution_type]
  
  match(
    type: distribution_type,
    app_identifier: [bundle_id],
    git_url: ENV["MATCH_GIT_URL"],
    force_for_new_devices: true,
    readonly: true
  )
end

desc <<~DOC
  Build and export app as an IPA.
  
  This lane compiles the specified app scheme, archives it, and exports it as an IPA file 
  ready for distribution. The build includes cleaning and detailed logging for debugging.
  
  Parameters:
    export_method - Export method: "ad-hoc" or "development" (default: "ad-hoc")
  
  Environment Variables:
    APP_SCHEME    - Xcode scheme to build
    IPA_FILE      - Output name for the generated IPA file (without extension)
DOC
lane :build_app_match do |options|
  scheme = ENV["APP_SCHEME"]
  ipaFile = ENV["IPA_FILE"]
  export_method = options[:export_method]

  puts "➡️  Running build_app"
  puts "   scheme: #{scheme}"
  puts "   ipaFile: #{ipaFile}"
  puts "   export_method: #{export_method}"

  # Skip confirmation for development builds in CI
  if export_method == "development"
    ENV["FASTLANE_SKIP_WAITING_FOR_BUILD_PROCESSING"] = "true"
    puts "⚠️  Skipping waiting for build processing (development build)"
  end

  gym(
    scheme: scheme,
    export_method: export_method,
    configuration: "Debug",
    silent: false,
    clean: true,
    suppress_xcode_output: false,
    export_options: { manageAppVersionAndBuildNumber: false },
    output_name: ipaFile
  )
end

lane :setup_provisioning_health_example_app do 
  # |options|
  # bundle_id = ENV["APP_IDENTIFIER"]
  # distribution_type = options[:distribution_type]
  
  match(
    type: "adhoc",
    app_identifier: ENV["APP_IDENTIFIER"],
    git_url: ENV["MATCH_GIT_URL"],
    force_for_new_devices: true,
    readonly: true
  )
end
lane :build_health_example_app do
  setup_provisioning_health_example_app
    gym(
      scheme: ENV['APP_SCHEME'],
      export_method: "ad-hoc",
      silent: true,
      clean:true,
      suppress_xcode_output: true,
      export_options: { manageAppVersionAndBuildNumber: false },
      output_name: ENV['IPA_FILE']
    )
  end

desc <<~DOC
  Complete build process for app distribution.
  
  This lane combines provisioning setup and app building into a single workflow.
  It first sets up the necessary code signing certificates and provisioning profiles,
  then builds and exports the app as an IPA ready for distribution.
  
  Parameters:
    distribution_type - Type of distribution for provisioning: "adhoc" or "development" (default: "adhoc")
    export_method     - Export method for build: "ad-hoc" or "development" (default: "ad-hoc")
  
  Environment Variables:
    APP_IDENTIFIER    - Bundle identifier for the app
    APP_SCHEME        - Xcode scheme to build
    IPA_FILE          - Output name for the generated IPA file (without extension)
    MATCH_GIT_URL     - Git URL for the match certificates repository
DOC
lane :build_app_with_provisioning do |options|
  distribution_type = options[:distribution_type]
  export_method = options[:export_method]
  
  "➡️  Running build_app_with_provisioning"
  puts "   distribution_type: #{distribution_type}"
  puts "   export_method: #{export_method}"


  setup_provisioning(distribution_type: distribution_type)
  build_app_match(export_method: export_method)
end

# Convenience lanes for specific distribution types
desc "Build app for ad-hoc distribution"
lane :build_app_adhoc do
  build_app_with_provisioning(distribution_type: "adhoc", export_method: "ad-hoc")
end

desc "Build app for development distribution"
lane :build_app_development do
  build_app_with_provisioning(distribution_type: "development", export_method: "development")
end

desc "Distribute the app to Firebase App Distribution"
  lane :distribute_to_firebase do
    # Verify required environment variables
    required_vars = ['FIREBASE_APP_ID', 'FIREBASE_SERVICE_ACCOUNT_JSON', 'IPA_FILE', 'DISTRIBUTION_GROUPS']
    required_vars.each do |var|
      if ENV[var].nil? || ENV[var].empty?
        UI.user_error!("Required environment variable '#{var}' is not defined")
      end
    end
    
    # Create temporary file for service account
    require 'tempfile'
    service_account_file = Tempfile.new(['firebase-service-account', '.json'])
    
    begin
      # Write service account credentials to temporary file
      File.write(service_account_file.path, ENV['FIREBASE_SERVICE_ACCOUNT_JSON'])
      
      # Handle IPA file path - look in parent directory where artifact was downloaded
      ipa_filename = ENV['IPA_FILE']
      
      # Add .ipa extension if not present
      unless ipa_filename.end_with?('.ipa')
        ipa_filename = "#{ipa_filename}.ipa"
      end
      
      # Get absolute path to parent directory (project root)
      parent_dir = File.expand_path('..')
      
      # Look for IPA file in parent directory using absolute path
      ipa_path = nil
      absolute_ipa_path = File.join(parent_dir, ipa_filename)
      
      if File.exist?(absolute_ipa_path)
        ipa_path = absolute_ipa_path
      else
        # If exact filename not found, use any IPA file in parent directory with absolute path
        ipa_files_parent = Dir.glob("../*.ipa")
        if ipa_files_parent.any?
          relative_ipa_path = ipa_files_parent.first
          ipa_path = File.expand_path(relative_ipa_path)
        else
          UI.user_error!("No IPA files found in parent directory. Expected: #{absolute_ipa_path}")
        end
      end
      
      # Use official Firebase App Distribution plugin
      firebase_app_distribution(
        app: ENV['FIREBASE_APP_ID'],
        ipa_path: ipa_path,
        groups: ENV['DISTRIBUTION_GROUPS'],
        release_notes: ENV['RELEASE_NOTES'] || "Automatic distribution from CI/CD",
        service_credentials_file: service_account_file.path
      )
      
    rescue => e
      UI.error("Error during distribution: #{e.message}")
      raise e
    ensure
      # Clean up temporary file
      if service_account_file
        service_account_file.close
        service_account_file.unlink
      end
    end
  end
end
