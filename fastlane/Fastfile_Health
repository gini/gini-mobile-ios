# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc <<~DOC
    Generate certificates
  DOC

  lane :generate_certificates do
    match(
      app_identifier: ["net.gini.healthsdk.example"],
      type: "development",
      generate_apple_certs: true,
      force_for_new_devices: true
    )
  end

  lane :refresh_profiles do
    match(
      app_identifier: ["net.gini.healthsdk.example"],
      type: "development",
      generate_apple_certs: false,
      force_for_new_devices: true
    )
  end

  lane :register_new_devices do 
    register_devices(devices_file: "./devices.txt")
  end

  
desc <<~DOC
Runs unit tests for a given target using the `scan` action (a wrapper around xcodebuild).

Parameters:
- `target`: The name of the target whose test scheme will be executed. Example: `GinBankSDK`.
- `destination`: The destination for the tests. Example: `platform=iOS Simulator,name=iPhone 15,OS=17.4`.

DOC
# Set the lines below before Fastlane runs in Github Actions
# env:
#     FASTLANE_SKIP_SUMMARY: true

lane :run_unit_tests do |options|
  target = options[:target]
  destination = options[:destination]
  clientSecret = options[:clientSecret]

  unless target && destination
    UI.user_error!("Missing 'target' or 'destination' parameter. Pass both to run the tests.")
  end

  scan(
    workspace: "GiniMobile.xcworkspace",
    scheme: target,
    clean: true,
    destination: destination,
    disable_concurrent_testing: false,
    xcargs: [
      'CLIENT_ID="gini-mobile-test"',
      "CLIENT_SECRET=#{clientSecret}",
      'CODE_SIGNING_REQUIRED=NO',
      'CODE_SIGN_IDENTITY=""',
      'ONLY_ACTIVE_ARCH=NO'
    ].join(' '),
    output_types: "",                 # prevent report generation
    output_directory: "./tmp_test_output",
    fail_build: true,
    code_coverage: true
  )
  
  # Clean up the report files that were generated
  sh("rm -rf ./tmp_test_output") if File.exist?("./tmp_test_output")
  sh("rm -rf ./tmp_derived_data") if File.exist?("./tmp_derived_data")
end
end
